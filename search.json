[
  {
    "objectID": "chapters/chapter_04/online_polyglot_notebooks_lab.html",
    "href": "chapters/chapter_04/online_polyglot_notebooks_lab.html",
    "title": "使用 Visual Studio Code 和 Polyglot Notebooks 擴充套件測試Grain的RPC方法實做",
    "section": "",
    "text": "需要安裝的軟體有：\n\n.NET 6 SDK\nVisual Studio Code\nVisual Studio Code的C#擴充套件。\nVisual Studio Code的Polyglot Notebooks擴充套件。\nPowerShell Core (v7.+)，在目前Windows, macOS, Linux各種主流版本發佈的作業系統安裝都有支援。\n\n\n\n\n\n\n在Visual Studio Code中，按下 Ctrl(Cmd)+Shift+P以便叫出 Command Palette 命令選擇區命令列，然後輸入new notebook以便篩選可用選項：\n\n選擇.NET Interactive: Create new blank notebook，然後按下 Enter。\n選擇要使用的檔案格式，如果需要在非Visual Studio Code的 .NET Interactive這個擴充套件提供的UI中執行，或不需實際執行就能看到內容的場合(如GitHub網頁上)，選擇傳統Jupyter Notebook的 .ipynb 格式，然後按 Enter：\n\n選擇Notebook檔案主要使用的程式語言，此處選 C#，然後按 Enter。\n\n此時空白的Notebook檔案就已建立完成，可以開始撰寫程式碼了。\n\n\n在Notebook檔案中，可以打程式碼按 Ctrl + Enter 執行程式的UI部分，以下簡稱『Code Cell』以方便進行說明。\n\n\n\n\n\n\n首先在昨天程式碼專案的根目錄，建立一個 notebooks 目錄，然後在此目錄內建立一個 .NET Interactive Notebooks檔案。\n建立一個『Code Cell』輸入以下內容，以便安裝Nuget套件：\n#region install Nuget\n//Essential libs for running .NET 6 Generic Host\n#r \"nuget: Microsoft.Extensions.Hosting\"\n#r \"nuget: Microsoft.Extensions.DependencyInjection\"\n\n//Orleans essential dependencies\n#r \"nuget: Microsoft.Orleans.Core\"\n#r \"nuget: Microsoft.Orleans.OrleansRuntime\"\n//Orleans silo server runtime essentials\n#r \"nuget: Microsoft.Orleans.Server\"\n#endregion\n接在後面再建立一個『Code Cell』輸入以下內容，以便引入命名空間(namespace)：\nusing Microsoft.Extensions.Hosting;\nusing Orleans;\nusing Orleans.Runtime;\nusing Orleans.Hosting;\n由於 .NET Interactive的底層C#實作是使用C# Script(.csx檔)，不支援自定義命名空間，因此我們定義RPC介面和Grain實作類別不以把程式碼寫在『Code Cell』裡的方式，而是在Code Cell內用PowerShell命令來呼叫dotnet CLI編譯建置先前已經定義好的Grain實作類別專案：\n#!pwsh\ndotnet build ../src/Grains/RpcDemo.Grains.Greeting/RpcDemo.Grains.Greeting.csproj --nologo --verbosity quiet\n魔術命令(magic command)『#!pwsh』表示此Code Cell中，該標記之後的內容是使用PowerShell來解譯/執行的命令。\n接在後面再建立一個『Code Cell』輸入以下內容，以便載入編譯好的Grain實作類別：\n#r \"../src/Shared/RpcDemo.Interfaces.Hello/bin/Debug/netstandard2.0/RpcDemo.Interfaces.Hello.dll\"\n#r \"../src/Grains/RpcDemo.Grains.Greeting/bin/Debug/net6.0/RpcDemo.Grains.Greeting.dll\"\n接在後面再建立一個『Code Cell』，輸入起始化Orleans Silo的Generic HostBuilder配置程式碼：\nusing RpcDemo.Interfaces.Hello;\nusing RpcDemo.Grains.Greeting;\nvar hostBuilder = Host.CreateDefaultBuilder()\n    .UseOrleans(builder =&gt;\n    {\n        builder.UseLocalhostClustering();\n        builder.ConfigureApplicationParts(parts =&gt; {\n          parts.AddApplicationPart(typeof(IHelloGrain).Assembly).WithReferences();\n          parts.AddApplicationPart(typeof(HelloGrain).Assembly).WithReferences();\n        });\n    });\nMicrosoft Orleans框架提供一個UseOrleans()擴充方法來整合至ASP.NET Core的web服務框架/.NET Generic Host中執行Silo的服務實體，而餵給該方法的Lambda敘述式參數中，第一行UseLocalhostClustering()設定Silo使用本機端測試叢集，第二行呼叫SiloBuilder的 ConfigureApplicationParts() 擴充方法來載入HelloGrain實作類別的Assembly，並且使用另一個 WithReferences() 擴充方法來載入該Grain實作類別的程式中有用到的其他相依類別。\n這裡要注意的是，由於.NET Interactive底層的Nested Kernel機制，所以在.NET Interactive Notebook中宣告的SiloBuilder除了要宣告載入Grain實作類別之外，RPC介面的Interface型別也得要明確寫出載入宣告。\n然後上述的配置無誤的話，呼叫hostBuilder的Build()建置方法來產生一個Generic Host實體，並且呼叫StartAsync()方法來啟動承載本機Silo測試叢集的.NET Generic Host服務實體：\nvar host = hostBuilder.Build();\nawait host.StartAsync();\n再來我們開始配置Orleans呼叫RPC客戶端的ClientBuilder程式碼：\nvar clientBuilder = new ClientBuilder().UseLocalhostClustering();\nclientBuilder.ConfigureApplicationParts(parts=&gt;parts.AddApplicationPart(typeof(IHelloGrain).Assembly));\n與Server端類似，在Client端也有個UseLocalhostClustering()擴充方法設定連結本機端測試叢集的Silo服務，然後也有相對應載入RPC介面的Assembly的機制。\n配置無誤的話，呼叫Build()建置方法產生Orleans Client端物件：\nvar client = clientBuilder.Build();\n和Silo連線：\nawait client.Connect();\n建立HelloGrain實體的Client端參考(RPC proxy)：\nvar helloGrainRpc = client.GetGrain&lt;IHelloGrain&gt;(0);\n呼叫Grain的RPC方法：\nvar greeting = await helloGrainRpc.SayHello(\"Orleans\");\ndisplay(greeting);\n這裡要注意的是，最後一行的 display() 是 .NET Interactive Notebook C# Kernel的特殊函式可印出變數值，執行的結果如下圖所示：\n\n呼叫結束後，如果RPC proxy不再使用時，關閉Client端連線：\nawait client.Close();\n最後記得呼叫StopAsync()方法來關閉.NET Generic Host服務實體：\nawait host.StopAsync();\n\n以上是使用 .NET Interactive Notebook 來撰寫Orleans的範例，這個範例可直接從GitHub的預覽網頁上觀看或下載：\nhttps://github.com/OAAB-Book/OrleansNet6HelloWorld/blob/chapter_04/notebooks/OrleansNet6HelloWorld.ipynb\n範例專案原始檔：\nhttps://github.com/OAAB-Book/OrleansNet6HelloWorld/tree/chapter_04"
  },
  {
    "objectID": "chapters/chapter_04/online_polyglot_notebooks_lab.html#建立-poloyglot-notebooks",
    "href": "chapters/chapter_04/online_polyglot_notebooks_lab.html#建立-poloyglot-notebooks",
    "title": "使用 Visual Studio Code 和 Polyglot Notebooks 擴充套件測試Grain的RPC方法實做",
    "section": "",
    "text": "在Visual Studio Code中，按下 Ctrl(Cmd)+Shift+P以便叫出 Command Palette 命令選擇區命令列，然後輸入new notebook以便篩選可用選項：\n\n選擇.NET Interactive: Create new blank notebook，然後按下 Enter。\n選擇要使用的檔案格式，如果需要在非Visual Studio Code的 .NET Interactive這個擴充套件提供的UI中執行，或不需實際執行就能看到內容的場合(如GitHub網頁上)，選擇傳統Jupyter Notebook的 .ipynb 格式，然後按 Enter：\n\n選擇Notebook檔案主要使用的程式語言，此處選 C#，然後按 Enter。\n\n此時空白的Notebook檔案就已建立完成，可以開始撰寫程式碼了。\n\n\n在Notebook檔案中，可以打程式碼按 Ctrl + Enter 執行程式的UI部分，以下簡稱『Code Cell』以方便進行說明。\n\n\n\n\n\n\n首先在昨天程式碼專案的根目錄，建立一個 notebooks 目錄，然後在此目錄內建立一個 .NET Interactive Notebooks檔案。\n建立一個『Code Cell』輸入以下內容，以便安裝Nuget套件：\n#region install Nuget\n//Essential libs for running .NET 6 Generic Host\n#r \"nuget: Microsoft.Extensions.Hosting\"\n#r \"nuget: Microsoft.Extensions.DependencyInjection\"\n\n//Orleans essential dependencies\n#r \"nuget: Microsoft.Orleans.Core\"\n#r \"nuget: Microsoft.Orleans.OrleansRuntime\"\n//Orleans silo server runtime essentials\n#r \"nuget: Microsoft.Orleans.Server\"\n#endregion\n接在後面再建立一個『Code Cell』輸入以下內容，以便引入命名空間(namespace)：\nusing Microsoft.Extensions.Hosting;\nusing Orleans;\nusing Orleans.Runtime;\nusing Orleans.Hosting;\n由於 .NET Interactive的底層C#實作是使用C# Script(.csx檔)，不支援自定義命名空間，因此我們定義RPC介面和Grain實作類別不以把程式碼寫在『Code Cell』裡的方式，而是在Code Cell內用PowerShell命令來呼叫dotnet CLI編譯建置先前已經定義好的Grain實作類別專案：\n#!pwsh\ndotnet build ../src/Grains/RpcDemo.Grains.Greeting/RpcDemo.Grains.Greeting.csproj --nologo --verbosity quiet\n魔術命令(magic command)『#!pwsh』表示此Code Cell中，該標記之後的內容是使用PowerShell來解譯/執行的命令。\n接在後面再建立一個『Code Cell』輸入以下內容，以便載入編譯好的Grain實作類別：\n#r \"../src/Shared/RpcDemo.Interfaces.Hello/bin/Debug/netstandard2.0/RpcDemo.Interfaces.Hello.dll\"\n#r \"../src/Grains/RpcDemo.Grains.Greeting/bin/Debug/net6.0/RpcDemo.Grains.Greeting.dll\"\n接在後面再建立一個『Code Cell』，輸入起始化Orleans Silo的Generic HostBuilder配置程式碼：\nusing RpcDemo.Interfaces.Hello;\nusing RpcDemo.Grains.Greeting;\nvar hostBuilder = Host.CreateDefaultBuilder()\n    .UseOrleans(builder =&gt;\n    {\n        builder.UseLocalhostClustering();\n        builder.ConfigureApplicationParts(parts =&gt; {\n          parts.AddApplicationPart(typeof(IHelloGrain).Assembly).WithReferences();\n          parts.AddApplicationPart(typeof(HelloGrain).Assembly).WithReferences();\n        });\n    });\nMicrosoft Orleans框架提供一個UseOrleans()擴充方法來整合至ASP.NET Core的web服務框架/.NET Generic Host中執行Silo的服務實體，而餵給該方法的Lambda敘述式參數中，第一行UseLocalhostClustering()設定Silo使用本機端測試叢集，第二行呼叫SiloBuilder的 ConfigureApplicationParts() 擴充方法來載入HelloGrain實作類別的Assembly，並且使用另一個 WithReferences() 擴充方法來載入該Grain實作類別的程式中有用到的其他相依類別。\n這裡要注意的是，由於.NET Interactive底層的Nested Kernel機制，所以在.NET Interactive Notebook中宣告的SiloBuilder除了要宣告載入Grain實作類別之外，RPC介面的Interface型別也得要明確寫出載入宣告。\n然後上述的配置無誤的話，呼叫hostBuilder的Build()建置方法來產生一個Generic Host實體，並且呼叫StartAsync()方法來啟動承載本機Silo測試叢集的.NET Generic Host服務實體：\nvar host = hostBuilder.Build();\nawait host.StartAsync();\n再來我們開始配置Orleans呼叫RPC客戶端的ClientBuilder程式碼：\nvar clientBuilder = new ClientBuilder().UseLocalhostClustering();\nclientBuilder.ConfigureApplicationParts(parts=&gt;parts.AddApplicationPart(typeof(IHelloGrain).Assembly));\n與Server端類似，在Client端也有個UseLocalhostClustering()擴充方法設定連結本機端測試叢集的Silo服務，然後也有相對應載入RPC介面的Assembly的機制。\n配置無誤的話，呼叫Build()建置方法產生Orleans Client端物件：\nvar client = clientBuilder.Build();\n和Silo連線：\nawait client.Connect();\n建立HelloGrain實體的Client端參考(RPC proxy)：\nvar helloGrainRpc = client.GetGrain&lt;IHelloGrain&gt;(0);\n呼叫Grain的RPC方法：\nvar greeting = await helloGrainRpc.SayHello(\"Orleans\");\ndisplay(greeting);\n這裡要注意的是，最後一行的 display() 是 .NET Interactive Notebook C# Kernel的特殊函式可印出變數值，執行的結果如下圖所示：\n\n呼叫結束後，如果RPC proxy不再使用時，關閉Client端連線：\nawait client.Close();\n最後記得呼叫StopAsync()方法來關閉.NET Generic Host服務實體：\nawait host.StopAsync();\n\n以上是使用 .NET Interactive Notebook 來撰寫Orleans的範例，這個範例可直接從GitHub的預覽網頁上觀看或下載：\nhttps://github.com/OAAB-Book/OrleansNet6HelloWorld/blob/chapter_04/notebooks/OrleansNet6HelloWorld.ipynb\n範例專案原始檔：\nhttps://github.com/OAAB-Book/OrleansNet6HelloWorld/tree/chapter_04"
  },
  {
    "objectID": "chapters/chapter_20/index.html",
    "href": "chapters/chapter_20/index.html",
    "title": "第20章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n20-1\nhttps://github.com/OrleansContrib/DesignPatterns/blob/master/Smart%20Cache.md\n\n\n\n20-2\nhttps://redis.io\n\n\n\n20-3\nhttps://www.memcached.org/\n\n\n\n20-4\nhttps://www.nuget.org/packages/Microsoft.Orleans.Persistence.Redis\n\n\n\n20-4\nhttps://www.nuget.org/packages/Orleans.Persistence.Redis/3.2.2\n\n\n\n20-5\nhttps://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair\n\n\n\n20-6\nhttps://github.com/OrleansContrib/DesignPatterns/blob/master/Dispatcher.md\n\n\n\n20-7\nhttps://samnewman.io/patterns/architectural/bff\n\n\n\n20-8\nhttps://github.com/OrleansContrib/DesignPatterns/blob/master/Cadence.md\n\n\n\n20-9\nhttps://github.com/dotnet/orleans/issues/5520#issuecomment-484987681\n\n\n\n20-10\nhttps://github.com/OrleansContrib/DesignPatterns/blob/master/Observer.md\n\n\n\n20-11\nhttps://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\n\n\n\n\n\n\n範例程式碼\n\n範例專案：https://www.nuget.org/packages/Orleans.Persistence.Redis/3.2.2"
  },
  {
    "objectID": "chapters/chapter_18/index.html",
    "href": "chapters/chapter_18/index.html",
    "title": "第18章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n18-1\nhttps://github.com/OrleansContrib/OrleansDashboard\n\n\n\n18-2\nhttps://github.com/OrleansContrib/OrleansDashboard/blob/master/OrleansDashboard/Implemntation/GrainProfilerFilter.cs\n\n\n\n18-3\nhttps://learn.microsoft.com/dotnet/api/system.reflection.methodinfo\n\n\n\n18-4\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.requestcontext?view=orleans-3.0\n\n\n\n18-5\nhttps://learn.microsoft.com/aspnet/core/mvc/views/overview?view=aspnetcore-6.0#viewdata\n\n\n\n18-6\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.requestcontext.set?view=orleans-3.0\n\n\n\n18-7\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.requestcontext.get?view=orleans-3.0\n\n\n\n18-8\nhttps://learn.microsoft.com/dotnet/api/orleans.iincominggraincallfilter?view=orleans-3.0\n\n\n\n18-9\nhttps://learn.microsoft.com/dotnet/api/orleans.ioutgoinggraincallfilter?view=orleans-3.0\n\n\n\n18-10\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.silohostbuildergraincallfilterextensions.addincominggraincallfilter?view=orleans-3.0\n\n\n\n18-11\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.silohostbuildergraincallfilterextensions.addoutgoinggraincallfilter?view=orleans-3.0\n\n\n\n18-12\nhttps://learn.microsoft.com/dotnet/api/orleans.clientbuilder?view=orleans-3.0\n\n\n\n18-13\nhttps://learn.microsoft.com/dotnet/api/orleans.clientbuildergraincallfilterextensions.addoutgoinggraincallfilter?view=orleans-3.0\n\n\n\n18-14\nhttps://github.com/dotnet/orleans/issues/7280#issuecomment-922999917\n\n\n\n18-15\nhttps://learn.microsoft.com/dotnet/api/system.diagnostics.stopwatch?view=net-6.0\n\n\n\n18-16\nhttps://www.nuget.org/packages/Microsoft.Extensions.Logging.Console/6.0.0\n\n\n\n18-17\nhttps://www.nuget.org/packages/Microsoft.Extensions.Logging.Debug/6.0.0\n\n\n\n18-18\nhttps://learn.microsoft.com/dotnet/api/orleans.grain.identitystring?view=orleans-3.0#orleans-grain-identitystring\n\n\n\n\n\n\n範例程式碼\n\n.NET 6 Orleans Call Filter 範例程式碼： https://github.com/OAAB-Book/OrleansNet6CallFilterDemo"
  },
  {
    "objectID": "chapters/chapter_16/index.html",
    "href": "chapters/chapter_16/index.html",
    "title": "第16章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n16-1\nhttps://www.microsoft.com/en-us/research/publication/transactions-distributed-actors-cloud-2\n\n\n\n16-2\nhttps://github.com/dotnet/orleans/issues/3369\n\n\n\n16-3\nhttps://www.nuget.org/packages/Microsoft.Orleans.Transactions.AzureStorage/3.7.1\n\n\n\n16-4\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.azuretablesilobuilderextensions.addazuretabletransactionalstatestorage\n\n\n\n16-5\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.azuretabletransactionsilobuilderextensions?view=orleans-7.0\n\n\n\n16-6\nhttps://learn.microsoft.com/host-integration-server/core/two-phase-commit2\n\n\n\n16-7\nhttps://github.com/dotnet/orleans/blob/3.x/src/Orleans.Transactions/DistributedTM/TransactionAgent.cs\n\n\n\n16-8\nhttps://learn.microsoft.com/dotnet/api/orleans.transactions.abstractions.itransactionalstate-1?view=orleans-3.0\n\n\n\n16-9\nhttps://learn.microsoft.com/dotnet/api/orleans.transactions.abstractions.transactionalstateattribute?view=orleans-3.0\n\n\n\n16-10\nhttps://learn.microsoft.com/dotnet/api/orleans.transactions.abstractions.itransactionalstate-1.performread?view=orleans-3.0\n\n\n\n16-11\nhttps://learn.microsoft.com/dotnet/api/orleans.transactions.abstractions.itransactionalstate-1.performupdate?view=orleans-3.0\n\n\n\n16-12\nhttps://learn.microsoft.com/dotnet/api/orleans.transactionattribute?view=orleans-3.0\n\n\n\n16-13\nhttps://learn.microsoft.com/dotnet/api/orleans.transactionoption?view=orleans-3.0\n\n\n\n16-14\nhttps://learn.microsoft.com/dotnet/api/system.notsupportedexception\n\n\n\n16-15\nhttps://learn.microsoft.com/dotnet/api/orleans.grainextensions.getprimarykeystring?view=orleans-3.0\n\n\n\n16-16\nhttps://learn.microsoft.com/dotnet/api/orleans.transactions.abstractions.transactionalstateattribute.-ctor?view=orleans-3.0\n\n\n\n16-17\nhttps://learn.microsoft.com/dotnet/api/orleans.transactions.abstractions.itransactionalstate-1.performread?view=orleans-3.0\n\n\n\n16-18\nhttps://learn.microsoft.com/dotnet/api/orleans.transactions.abstractions.itransactionalstate-1.performupdate?view=orleans-3.0\n\n\n\n16-19\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.azuretablesilobuilderextensions.addazuretabletransactionalstatestorageasdefault?view=orleans-3.0\n\n\n\n16-20\nhttps://learn.microsoft.com/azure/storage/common/storage-use-azurite\n\n\n\n16-21\nhttps://learn.microsoft.com/dotnet/api/orleans.transactions.azurestorage.azurestorageoperationoptions.configuretableserviceclient?view=orleans-3.0\n\n\n\n16-22\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.silobuilderextensions.usetransactions?view=orleans-3.0\n\n\n\n16-23\nhttps://learn.microsoft.com/dotnet/api/orleans.transactions.orleanstransactionsdisabledexception?view=orleans-3.0\n\n\n\n16-24\nhttps://learn.microsoft.com/dotnet/api/orleans.transactions.orleanstransactionabortedexception?view=orleans-3.0"
  },
  {
    "objectID": "chapters/chapter_14/index.html",
    "href": "chapters/chapter_14/index.html",
    "title": "第14章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n14-1\nhttps://learn.microsoft.com/dotnet/api/orleans.grain.registertimer?view=orleans-3.0\n\n\n\n14-2\nhttps://learn.microsoft.com/dotnet/api/system.threading.timer\n\n\n\n14-3\nhttps://learn.microsoft.com/dotnet/api/orleans.iremindable?view=orleans-3.0\n\n\n\n14-4\nhttps://learn.microsoft.com/dotnet/api/orleans.iremindable.receivereminder?view=orleans-3.0\n\n\n\n14-5\nhttps://learn.microsoft.com/dotnet/api/orleans.grain.registerorupdatereminder?view=orleans-3.0\n\n\n\n14-6\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.igrainreminder?view=orleans-3.0\n\n\n\n14-7\nhttps://learn.microsoft.com/dotnet/api/orleans.grain.unregisterreminder?view=orleans-3.0\n\n\n\n14-8\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.silohostbuilderreminderextensions.useinmemoryreminderservice?view=orleans-3.0\n\n\n\n14-9\nhttps://www.nuget.org/packages/Microsoft.Orleans.Reminders.AzureStorage\n\n\n\n14-10\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.silohostbuilderreminderextensions.useazuretablereminderservice\n\n\n\n14-11\nhttps://learn.microsoft.com/dotnet/orleans/host/configuration-guide/adonet-configuration#persistence\n\n\n\n14-12\nhttps://www.nuget.org/packages/Microsoft.Orleans.Reminders.AdoNet\n\n\n\n14-13\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.silohostbuilderreminderextensions.useadonetreminderservice?view=orleans-3.0"
  },
  {
    "objectID": "chapters/chapter_12/index.html",
    "href": "chapters/chapter_12/index.html",
    "title": "第12章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n12-1\nhttps://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken\n\n\n\n12-2\nhttps://learn.microsoft.com/dotnet/api/system.threading.cancellationsource\n\n\n\n12-3\nhttps://learn.microsoft.com/en-us/dotnet/api/orleans.graincancellationtoken?view=orleans-3.0\n\n\n\n12-4\nhttps://github.com/dotnet/orleans/issues/5299#issuecomment-452455112\n\n\n\n12-5\nhttps://learn.microsoft.com/dotnet/api/orleans.concurrency.alwaysinterleaveattribute\n\n\n\n12-6\nhttps://learn.microsoft.com/dotnet/api/orleans.concurrency.reentrantattribute"
  },
  {
    "objectID": "chapters/chapter_10/index.html",
    "href": "chapters/chapter_10/index.html",
    "title": "第10章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n10-1\nhttps://www.nuget.org/packages/Microsoft.Orleans.Persistence.AdoNet\n\n\n\n10-2\nhttps://learn.microsoft.com/dotnet/framework/data/adonet/ado-net-overview\n\n\n\n10-3\nhttps://learn.microsoft.com/dotnet/orleans/host/configuration-guide/adonet-configuration\n\n\n\n10-4\nhttps://github.com/dotnet/orleans/blob/3.x/src/AdoNet/Shared/SQLServer-Main.sql#L29\n\n\n\n10-5\nhttps://learn.microsoft.com/dotnet/orleans/host/configuration-guide/adonet-configuration#main-scripts\n\n\n\n10-6\nhttps://learn.microsoft.com/dotnet/orleans/host/configuration-guide/adonet-configuration#persistence\n\n\n\n10-7\nhttps://www.nuget.org/packages/System.Data.SqlClient\n\n\n\n10-8\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.silobuilderextensions.addadonetgrainstorage?view=orleans-3.0\n\n\n\n10-9\nhttps://learn.microsoft.com/dotnet/orleans/host/configuration-guide/adonet-configuration#persistence\n\n\n\n10-10\nhttps://www.nuget.org/packages/Azure.Identity\n\n\n\n10-11\nhttps://learn.microsoft.com/dotnet/api/orleans.configuration.adonetgrainstorageoptions\n\n\n\n10-12\nhttps://github.com/dotnet/orleans/blob/3.x/src/AdoNet/Shared/PostgreSQL-Main.sql#L1\n\n\n\n10-13\nhttps://www.nuget.org/packages/Npgsql"
  },
  {
    "objectID": "chapters/chapter_08/index.html",
    "href": "chapters/chapter_08/index.html",
    "title": "第8章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n8-1\nhttps://learn.microsoft.com/dotnet/orleans/grains/grain-lifecycle\n\n\n\n8-2\nhttps://learn.microsoft.com/dotnet/api/orleans.core.istorage.readstateasync\n\n\n\n8-3\nhttps://learn.microsoft.com/dotnet/api/orleans.core.istorage.writestateasync\n\n\n\n8-4\nhttps://learn.microsoft.com/dotnet/api/orleans.core.istorage.clearstateasync\n\n\n\n8-5\nhttps://github.com/dotnet/orleans-docs/blob/main/src/images/grain_state_1.png\n圖片來源：舊Orleans說明文件\n\n\n8-6\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.persistentstateattribute\n\n\n\n8-7\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.ipersistentstate-1\n\n\n\n8-8\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.memorygrainstoragesilobuilderextensions.addmemorygrainstorage?view=orleans-3.0\n\n\n\n8-9\nhttps://learn.microsoft.com/dotnet/api/orleans.testinghost.testcluster.stopallsilosasync?view=orleans-3.0"
  },
  {
    "objectID": "chapters/chapter_06/index.html",
    "href": "chapters/chapter_06/index.html",
    "title": "第6章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n6-1\nhttps://learn.microsoft.com/dotnet/api/orleans.iclusterclient?view=orleans-3.0\n\n\n\n6-2\nhttps://learn.microsoft.com/dotnet/api/orleans.grain.grainfactory?view=orleans-3.0\n\n\n\n6-3\nhttps://learn.microsoft.com/dotnet/api/orleans.igrainfactory?view=orleans-3.0\n\n\n\n6-4\nhttps://learn.microsoft.com/dotnet/api/microsoft.extensions.hosting.generichostextensions.useorleans?view=orleans-3.0\n\n\n\n6-5\nhttps://www.nuget.org/packages/Microsoft.Orleans.TestingHost/3.7.1\n\n\n\n6-6\nhttps://learn.microsoft.com/dotnet/api/orleans.testinghost.testcluster?view=orleans-3.0\n\n\n\n6-7\nhttps://learn.microsoft.com/dotnet/api/orleans.testinghost.testclusterbuilder?view=orleans-3.0\n\n\n\n6-8\nhttps://learn.microsoft.com/dotnet/api/orleans.testinghost.isiloconfigurator?view=orleans-3.0"
  },
  {
    "objectID": "chapters/chapter_04/index.html",
    "href": "chapters/chapter_04/index.html",
    "title": "第4章網路資源",
    "section": "",
    "text": "註解編號\n連結\n附註說明\n\n\n\n\n4-1\nhttps://github.com/dotnet/interactive\n\n\n\n4-2\nhttps://jupyter.org\n\n\n\n4-3\nhttps://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode\nPolyglot Notebooks擴充套件下載網頁\n\n\n4-4\nhttps://code.visualstudio.com/docs/languages/polyglot\nVisual Studio Code的Polyglot Notebooks擴充套件官方說明\n\n\n4-5\nhttps://github.com/zufuliu/notepad2\n有支援 C#, F#, ASP .NET 的程式碼syntax highlight的開源notepad2 分支版本\n\n\n4-6\nhttps://github.com/dotnet/interactive/blob/main/docs/kernels-overview.md\n.NET Interactive的Kernel機制解說"
  },
  {
    "objectID": "chapters/chapter_04/index.html#polyglot-notebook實做範例",
    "href": "chapters/chapter_04/index.html#polyglot-notebook實做範例",
    "title": "第4章網路資源",
    "section": "Polyglot Notebook實做範例",
    "text": "Polyglot Notebook實做範例\n\n需安裝軟體\n\n.NET 6 SDK\nVisual Studio Code\nVisual Studio Code的C#擴充套件。\nVisual Studio Code的Polyglot Notebooks擴充套件。\nPowerShell Core (v7.+)\n\n\n\n範例程式碼與建置步驟解說\n\n使用 Visual Studio Code 和 Polyglot Notebooks 擴充套件測試Grain的RPC方法實做"
  },
  {
    "objectID": "chapters/chapter_02/index.html",
    "href": "chapters/chapter_02/index.html",
    "title": "第2章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n2-1\nhttps://www.brianstorti.com/the-actor-model\n\n\n\n2-2\nhttps://www.developer.com/design/down-and-dirty-understanding-the-actor-model/"
  },
  {
    "objectID": "chapters/chapter_01/index.html",
    "href": "chapters/chapter_01/index.html",
    "title": "第1章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n1-1\nhttp://aka.ms/orleans\nMicrosoft Orleans GitHub\n\n\n1-2\nhttps://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-net-7-preview-1/\nBlog announcement\n\n\n1-3\nhttps://youtu.be/-4BelRbFOVo\nNext Steps for Distributed Programming with .NET and Orleans\n\n\n1-4\nhttps://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/scale-out\n\n\n\n\n\n\n線上內容\n\nMicrosoft Orleans和其他類似框架的比較"
  },
  {
    "objectID": "chapters/chapter_03/index.html",
    "href": "chapters/chapter_03/index.html",
    "title": "第3章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n3-1\nhttps://learn.microsoft.com/dotnet/orleans/overview#what-are-grains\n\n\n\n3-2\nhttps://learn.microsoft.com/dotnet/api/orleans.grain\nGrain類別的API文件\n\n\n3-3\nhttps://en.wikipedia.org/wiki/Plain_old_CLR_object\nPOCO 定義\n\n\n3-4\nhttps://learn.microsoft.com/dotnet/api/system.threading.tasks.task\nTask的API文件\n\n\n3-5\nhttps://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\nTask&lt;T&gt;的API文件\n\n\n3-6\nhttps://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask\nValueTask的API文件\n\n\n3-7\nhttps://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1\nValueTask&lt;T&gt;的API文件\n\n\n3-8\nhttps://learn.microsoft.com/dotnet/api/orleans.igrainwithguidkey\nIGrainWithGuidKey的API文件\n\n\n3-9\nhttps://learn.microsoft.com/dotnet/api/orleans.igrainwithintegerkey\nIGrainWithIntegerKey的API文件\n\n\n3-10\nhttps://learn.microsoft.com/dotnet/api/orleans.igrainwithstringkey\nIGrainWithStringKey的API文件\n\n\n3-11\nhttps://learn.microsoft.com/dotnet/api/orleans.igrainwithguidcompoundkey\nIGrainWithGuidCompoundKey的API文件\n\n\n3-12\nhttps://learn.microsoft.com/dotnet/api/orleans.igrainwithintegercompoundkey\nIGrainWithIntegerCompoundKey的API文件\n\n\n3-13\nhttps://learn.microsoft.com/dotnet/orleans/grains/stateless-worker-grains\nStateless Worker Grains\n\n\n3-14\nhttps://learn.microsoft.com/dotnet/standard/serialization/\n\n\n\n3-15\nhttps://learn.microsoft.com/dotnet/orleans/resources/nuget-packages#grain-storage-providers"
  },
  {
    "objectID": "chapters/chapter_05/index.html",
    "href": "chapters/chapter_05/index.html",
    "title": "第5章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n5-1\nhttps://learn.microsoft.com/visualstudio/ide/solutions-and-projects-in-visual-studio#solution-folder\n\n\n\n5-2\nhttps://learn.microsoft.com/visualstudio/ide/solutions-and-projects-in-visual-studio#solution-explorer\n\n\n\n5-3\nhttps://code.visualstudio.com/docs/getstarted/userinterface#_explorer\n\n\n\n5-4\nhttps://learn.microsoft.com/en-us/dotnet/standard/class-library-overview\n\n\n\n5-5\nhttps://learn.microsoft.com/dotnet/standard/frameworks\n\n\n\n5-6\nhttps://learn.microsoft.com/dotnet/standard/net-standard\n\n\n\n5-7\nhttps://learn.microsoft.com/visualstudio/ide/managing-references-in-a-project#project-to-project-references\n\n\n\n5-8\nhttps://learn.microsoft.com/dotnet/orleans/resources/nuget-packages?pivots=orleans-3-x#clustering-providers-1\n\n\n\n5-9\nhttps://www.nuget.org/packages/Microsoft.Orleans.Core.Abstractions\n\n\n\n5-10\nhttps://www.nuget.org/packages/Microsoft.Orleans.CodeGenerator.MSBuild\n\n\n\n5-11\nhttps://www.nuget.org/packages/Microsoft.Orleans.Core\n\n\n\n5-12\nhttps://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger?view=dotnet-plat-ext-6.0\n\n\n\n5-13\nhttps://wwww.nuget.org/packages/Microsoft.Extensions.Logging.Abstractions\n\n\n\n5-14\nhttps://www.nuget.org/packages/Microsoft.Orleans.Server\n\n\n\n5-15\nhttps://www.nuget.org/packages/Microsoft.Orleans.Persistence.AdoNet\n\n\n\n5-16\nhttps://www.nuget.org/packages/Microsoft.Orleans.Client\n\n\n\n5-17\nhttps://grpc.io\n\n\n\n5-18\nhttps://proto.actor/docs/what-is-protoactor\n\n\n\n5-19\nhttps://github.com/dotnet/orleans/blob/3.x/src/Orleans.CodeGenerator.MSBuild/build/Microsoft.Orleans.CodeGenerator.MSBuild.targets\nMSBuild Task程式碼\n\n\n5-20\nhttps://learn.microsoft.com/dotnet/api/orleans.applicationpartmanagerextensions.addapplicationpart\n\n\n\n5-21\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.applicationpartmanagercodegenextensions.withcodegeneration\n\n\n\n5-22\nhttps://serilog.net\n\n\n\n5-23\nhttps://learn.microsoft.com/dotnet/api/orleans.codegeneration.knowntypeattribute\n\n\n\n5-24\nhttps://learn.microsoft.com/dotnet/api/orleans.clientbuilderextensions.uselocalhostclustering\nClient端的 UseLocalhostClustering() API\n\n\n5-25\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.corehostingextensions.uselocalhostclustering\nServer端的 UseLocalhostClustering() API\n\n\n5-26\nhttps://learn.microsoft.com/en-us/dotnet/api/orleans.hosting.silohostbuilder?view=orleans-3.0\nSiloHostBuilder\n\n\n5-27\nhttps://learn.microsoft.com/en-us/dotnet/api/system.console.cancelkeypress?view=net-6.0\nConsole.CancelKeyPress 事件的API文件"
  },
  {
    "objectID": "chapters/chapter_07/index.html",
    "href": "chapters/chapter_07/index.html",
    "title": "第7章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n7-1\nhttps://learn.microsoft.com/dotnet/core/extensions/dependency-injection\n\n\n\n7-2\nhttps://www.nuget.org/packages/Microsoft.Extensions.Logging/\n\n\n\n7-3\nhttps://github.com/rawsonm88/Cowsay\nCowsay GitHub專案網址\n\n\n7-4\nhttps://github.com/rawsonm88/Cowsay/blob/master/Cowsay.Abstractions/ICattleFarmer.cs\nICattleFarmer 定義\n\n\n7-5\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.isilobuilder.configureservices?view=orleans-3.0\n\n\n\n7-6\nhttps://learn.microsoft.com/dotnet/api/microsoft.extensions.hosting.hostbuilder.configureservices\n\n\n\n7-7\nhttps://www.nuget.org/packages/Moq\n\n\n\n7-8\nhttps://www.nuget.org/packages/ILogger.Moq\n\n\n\n7-9\nhttps://github.com/adrianiftode/Moq.ILogger#examples\nILogger.Moq 套件的使用範例\n\n\n7-10\nhttps://github.com/rawsonm88/Cowsay/blob/f1f3dd153e3d1c9b951bfeafbcf575ea5d4fdef7/Cowsay.Extensions.DependencyInjection/ServiceCollectionExtensions.cs#L13"
  },
  {
    "objectID": "chapters/chapter_09/index.html",
    "href": "chapters/chapter_09/index.html",
    "title": "第9章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n9-1\nhttps://www.nuget.org/packages/Microsoft.Orleans.Persistence.AzureStorage/3.7.1\n\n\n\n9-2\nhttps://github.com/Azure/Azurite\n\n\n\n9-3\nhttps://www.nuget.org/packages/Microsoft.Orleans.Server\n\n\n\n9-4\nhttps://learn.microsoft.com/dotnet/api/microsoft.extensions.hosting.generichostextensions.useorleans?view=orleans-3.0\n\n\n\n9-5\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.azuretablesilobuilderextensions.addazuretablegrainstorage?view=orleans-3.0\n\n\n\n9-6\nhttps://learn.microsoft.com/dotnet/api/orleans.persistence.azurestorage.azurestorageoperationoptions.configuretableserviceclient?view=orleans-3.0\n\n\n\n9-7\nhttps://learn.microsoft.com/dotnet/api/orleans.configuration.azuretablestorageoptions?view=orleans-3.0\n\n\n\n9-8\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.azureblobsilobuilderextensions.addazureblobgrainstorage?view=orleans-3.0\n\n\n\n9-9\nhttps://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n\n\n\n9-10\nhttps://learn.microsoft.com/dotnet/azure/sdk/authentication-azure-hosted-apps\n\n\n\n9-11\nhttps://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity#specifying-a-user-assigned-managed-identity-with-the-defaultazurecredential\n\n\n\n9-12\nhttps://www.nuget.org/packages/Azure.Identity\n\n\n\n9-13\nhttps://learn.microsoft.com/dotnet/api/orleans.persistence.azurestorage.azurestorageoperationoptions.configuretableserviceclient?view=orleans-3.0#orleans-persistence-azurestorage-azurestorageoperationoptions-configuretableserviceclient(system-uri-azure-azuresascredential)\n\n\n\n9-14\nhttps://learn.microsoft.com/dotnet/api/orleans.configuration.azureblobstorageoptions.configureblobserviceclient?view=orleans-3.0#orleans-configuration-azureblobstorageoptions-configureblobserviceclient(system-uri-azure-azuresascredential)"
  },
  {
    "objectID": "chapters/chapter_11/index.html",
    "href": "chapters/chapter_11/index.html",
    "title": "第11章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n11-1\nhttps://learn.microsoft.com/en-us/dotnet/api/orleans.iclusterclient?view=orleans-3.0\n\n\n\n11-2\nhttps://learn.microsoft.com/dotnet/api/orleans.grain.grainfactory\n\n\n\n11-3\nhttps://learn.microsoft.com/dotnet/api/system.serializableattribute\n\n\n\n11-4\nhttps://learn.microsoft.com/dotnet/api/orleans.testinghost.testcluster\n\n\n\n11-5\nhttps://learn.microsoft.com/en-us/dotnet/core/porting/net-framework-tech-unavailable#application-domains"
  },
  {
    "objectID": "chapters/chapter_13/index.html",
    "href": "chapters/chapter_13/index.html",
    "title": "第13章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n13-1\nhttps://github.com/dotnet/orleans/blob/3.x/src/Orleans.Runtime/Scheduler/ActivationTaskScheduler.cs\n\n\n\n13-2\nhttps://learn.microsoft.com/dotnet/api/system.threading.tasks.taskscheduler\n\n\n\n13-3\nhttps://learn.microsoft.com/dotnet/orleans/implementation/scheduler\n\n\n\n13-4\nhttps://learn.microsoft.com/dotnet/api/orleans.concurrency.alwaysinterleaveattribute\n\n\n\n13-5\nhttps://learn.microsoft.com/dotnet/api/orleans.reentrancy.reentrantattribute\n\n\n\n13-6\nhttps://learn.microsoft.com/dotnet/api/orleans.concurrency.mayinterleaveattribute\n\n\n\n13-7\nhttps://learn.microsoft.com/dotnet/api/orleans.concurrency.onewayattribute?view=orleans-3.0\n\n\n\n13-8\nhttps://learn.microsoft.com/en-us/dotnet/api/orleans.runtime.requestcontext.allowcallchainreentrancy?view=orleans-7.0\n\n\n\n13-9\nhttps://learn.microsoft.com/en-us/dotnet/orleans/grains/request-scheduling#call-chain-reentrancy"
  },
  {
    "objectID": "chapters/chapter_15/index.html",
    "href": "chapters/chapter_15/index.html",
    "title": "第15章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n15-1\nhttps://github.com/dotnet/orleans/issues/7858\n\n\n\n15-2\nhttps://learn.microsoft.com/dotnet/api/orleans.utilities.observermanager-1?view=orleans-7.0\n\n\n\n15-3\nhttps://learn.microsoft.com/dotnet/api/orleans.igrainobserver?view=orleans-3.0\n\n\n\n15-4\nhttps://learn.microsoft.com/dotnet/csharp/whats-new/tutorials/records\nC# Record explain\n\n\n15-5\nhttps://learn.microsoft.com/dotnet/api/orleans.igrainwithintegercompoundkey\n\n\n\n15-6\nhttps://learn.microsoft.com/dotnet/api/orleans.utilities.observermanager-1?view=orleans-7.0\n\n\n\n15-7\nhttps://github.com/dotnet/orleans/blob/3.x/test/Grains/TestGrains/ObserverManager.cs\n\n\n\n15-8\nhttps://learn.microsoft.com/en-us/dotnet/api/orleans.hosting.silobuildermemorystreamextensions.addmemorystreams?view=orleans-3.0\n\n\n\n15-9\nhttps://azure.microsoft.com/products/storage/queues\n\n\n\n15-10\nhttps://www.nuget.org/packages/Microsoft.Orleans.Streaming.AzureStorage\n\n\n\n15-11\nhttps://azure.microsoft.com/products/event-hubs\n\n\n\n15-12\nhttps://www.nuget.org/packages/Microsoft.Orleans.OrleansServiceBus\n\n\n\n15-13\nhttps://www.nuget.org/packages/Microsoft.Orleans.Streaming.EventHubs\n\n\n\n15-14\nhttps://aws.amazon.com/sqs\n\n\n\n15-15\nhttps://www.nuget.org/packages/Microsoft.Orleans.Streaming.SQS\n\n\n\n15-16\nhttps://github.com/OrleansContrib/Orleans.CosmosDB\n\n\n\n15-17\nhttps://github.com/OrleansContrib/Orleans.Streams.Kafka\n\n\n\n15-18\nhttps://github.com/KevinCathcart/Orleans.Streams.RabbitMqStreamProvider\n\n\n\n15-19\nhttps://github.com/berdon/Orleans.Providers.Redis\n\n\n\n15-20\nhttps://learn.microsoft.com/en-us/dotnet/api/orleans.hosting.eventhubstreamconfiguratorextensions.usedataadapter?view=orleans-3.0\n\n\n\n15-21\nhttps://learn.microsoft.com/dotnet/api/orleans.grain.getstreamprovider?view=orleans-3.0\n\n\n\n15-22\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.istreamprovider?view=orleans-3.0\n\n\n\n15-23\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.iasyncobserver-1.onnextasync?view=orleans-3.0\n\n\n\n15-24\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.iasyncobserver-1.oncompletedasync?view=orleans-3.0\n\n\n\n15-25\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.iasyncobserver-1.onerrorasync?view=orleans-3.0\n\n\n\n15-26\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.asyncobservableextensions.subscribeasync?view=orleans-3.0\n\n\n\n15-27\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.iasyncobserver-1?view=orleans-3.0\n\n\n\n15-28\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.streamsubscriptionhandle-1.resumeasync?view=orleans-3.0\n\n\n\n15-29\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.streamsubscriptionhandle-1.unsubscribeasync?view=orleans-3.0\n\n\n\n15-30\nhttps://learn.microsoft.com/dotnet/api/orleans.implicitstreamsubscriptionattribute?view=orleans-3.0\n\n\n\n15-31\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.core.istreamsubscriptionobserver?view=orleans-3.0\n\n\n\n15-32\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.streamproviderextensions?view=orleans-7.0\n\n\n\n15-33\nhttps://github.com/dotnet/orleans/issues/7059#issuecomment-823645203\n\n\n\n15-34\nhttps://learn.microsoft.com/dotnet/api/system.func-3?view=net-6.0\n\n\n\n15-35\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.iasyncstream-1.getallsubscriptionhandles?view=orleans-3.0\n\n\n\n15-36\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.silobuilderextensions.addazurequeuestreams?view=orleans-3.0\n\n\n\n15-37\nhttps://learn.microsoft.com/dotnet/api/orleans.implicitstreamsubscriptionattribute?view=orleans-3.0\n\n\n\n15-38\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.core.istreamsubscriptionobserver?view=orleans-3.0\n\n\n\n15-39\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.iasyncobserver-1?view=orleans-3.0\n\n\n\n15-40\nhttps://learn.microsoft.com/dotnet/api/orleans.streams.core.istreamsubscriptionhandlefactory.create?view=orleans-3.0\n\n\n\n15-41\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.clientbuilderextensions.addazurequeuestreams?view=orleans-3.0\n\n\n\n15-42\nhttps://github.com/adrianiftode/moq.ilogger\n\n\n\n15-43\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.silobuildermemorystreamextensions.addmemorystreams?view=orleans-3.0\n\n\n\n15-44\nhttps://learn.microsoft.com/dotnet/api/orleans.testinghost.iclientbuilderconfigurator?view=orleans-3.0\n\n\n\n15-45\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.clientbuilderextensions.addmemorystreams?view=orleans-3.0"
  },
  {
    "objectID": "chapters/chapter_17/index.html",
    "href": "chapters/chapter_17/index.html",
    "title": "第17章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n17-1\nhttps://learn.microsoft.com/dotnet/api/orleans.services.igrainservice?view=orleans-3.0\n\n\n\n17-2\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.grainservice?view=orleans-3.0\n\n\n\n17-3\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.grainservicessilobuilderextensions.addgrainservice?view=orleans-3.0\n\n\n\n17-4\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.services.grainserviceclient-1?view=orleans-3.0\n\n\n\n17-5\nhttps://github.com/dotnet/orleans/blob/main/src/Orleans.Reminders/ReminderService/LocalReminderService.cs\n\n\n\n17-6\nhttps://github.com/dotnet/orleans/issues/6763#issuecomment-701700176\n\n\n\n17-7\nhttps://learn.microsoft.com/dotnet/api/orleans.concurrency.statelessworkerattribute?view=orleans-3.0\n\n\n\n17-8\nhttps://learn.microsoft.com/dotnet/api/orleans.concurrency.statelessworkerattribute.-ctor?view=orleans-3.0#orleans-concurrency-statelessworkerattribute-ctor(system-int32)\n\n\n\n17-9\nhttps://github.com/dotnet/orleans/issues/5283"
  },
  {
    "objectID": "chapters/chapter_19/index.html",
    "href": "chapters/chapter_19/index.html",
    "title": "第19章網路資源",
    "section": "",
    "text": "相關網路連結\n\n\n\n註解編號\n連結\n附註說明\n\n\n\n\n19-1\nhttps://github.com/App-vNext/Polly\n\n\n\n19-2\nhttps://www.nuget.org/packages/Polly\n\n\n\n19-3\nhttps://github.com/App-vNext/Polly/wiki/Retry\n\n\n\n19-4\nhttps://github.com/App-vNext/Polly/wiki/Advanced-Circuit-Breaker\n\n\n\n19-5\nhttps://github.com/App-vNext/Polly/wiki/Timeout\n\n\n\n19-6\nhttps://github.com/App-vNext/Polly/blob/master/src/Polly/Retry/AsyncRetryPolicy.cs\n\n\n\n19-7\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.silounavailableexception?view=orleans-3.0\n\n\n\n19-8\nhttps://learn.microsoft.com/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly\n\n\n\n19-9\nhttps://learn.microsoft.com/dotnet/api/orleans.iclusterclient.connect?view=orleans-3.0#orleans-iclusterclient-connect(system-func((system-exception-system-threading-tasks-task((system-boolean)))))\n\n\n\n19-10\nhttps://en.wikipedia.org/wiki/Exponential_backoff\n\n\n\n19-11\nhttps://learn.microsoft.com/dotnet/api/orleans.concurrency.onewayattribute?view=orleans-3.0\n\n\n\n19-12\nhttps://learn.microsoft.com/dotnet/api/orleans.concurrency.readonlyattribute?view=orleans-3.0\n\n\n\n19-13\nhttps://learn.microsoft.com/dotnet/orleans/grains/request-scheduling\n\n\n\n19-14\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.igrainextension?view=orleans-3.0\n\n\n\n19-15\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.igrainruntime?view=orleans-3.0\n\n\n\n19-16\nhttps://learn.microsoft.com/dotnet/api/orleans.runtime.igrainactivationcontext?view=orleans-3.0\n\n\n\n19-17\nhttps://learn.microsoft.com/dotnet/api/orleans.hosting.hostinggrainextensions.addgrainextension?view=orleans-3.0\n\n\n\n19-18\nhttps://learn.microsoft.com/dotnet/api/orleans.grainextensions.asreference?view=orleans-3.0\n\n\n\n\n\n\n範例程式碼\n\nPolly 的 Retry Policy 套用在命令列程式的範例專案：https://github.com/OAAB-Book/ConsoleDemoPolly\n使用 Grain Extension 的範例專案：https://github.com/OAAB-Book/OrleansNet6GrainExtensionDemo"
  },
  {
    "objectID": "chapters/chapter_05/online_helloworld_lab.html",
    "href": "chapters/chapter_05/online_helloworld_lab.html",
    "title": "使用 .NET 命令列程式執行Orleans的Grain實作",
    "section": "",
    "text": "用PowerShell 7的指令列先建立資料夾結構，在專案根目錄執行下列指令：\nNew-Item -ItemType Directory \"./src/Hosting/Client\"\nNew-Item -ItemType Directory \"./src/Hosting/Server\"\n工作目錄切換到 src/Hosting/Client，建立 HelloWorld.Client.Console 的主控台應用程式專案：\ndotnet new console --no-restore --name \"HelloWorld.Client.Console\"\n工作目錄切換進 HelloWorld.Client.Console，將 HelloWorld.Interfaces.Hello 類別庫專案的參考加入：\ndotnet add reference ..\\..\\..\\Shared\\HelloWorld.Interfaces.Hello\\HelloWorld.Interfaces.Hello.csproj\n工作目錄切換到 src/Hosting/Server，建立 HelloWorld.Hosting.Console 的主控台應用程式專案：\ndotnet new console --no-restore --name \"HelloWorld.Hosting.Console\"\n工作目錄切換進 RpcDemo.Hosting.Console，將 RpcDemo.Grains.Greeting 類別庫專案的專案參考加入：\ndotnet add reference ..\\..\\..\\Grains\\HelloWorld.Grains.Greeting\\HelloWorld.Grains.Greeting.csproj\n工作目錄切換回最上層根目錄，將類別庫專案一一加入解決方案：\n（記得要使用 --solution-folder 參數，指定產生方案資料夾(Solution Folder)）\ndotnet sln add .\\src\\Hosting\\Client\\HelloWorld.Client.Console\\HelloWorld.Client.Console.csproj --solution-folder \"Hosting\\Client\"\ndotnet sln add .\\src\\Hosting\\Server\\HelloWorld.Hosting.Console\\HelloWorld.Hosting.Console.csproj --solution-folder \"Hosting\\Server\"\n\n\n\n\n\n將各專案安裝對應的Nuget套件：\n\nRpcDemo.Interfaces.Hello專案：RPC介面專案，安裝套件有：\n\nMicrosoft.Orleans.Core.Abstractions\nMicrosoft.Orleans.CodeGenerator.MSBuild\n\nRpcDemo.Grains.Greeting專案：Grain實作專案，安裝套件有：\n\nMicrosoft.Orleans.Core\nMicrosoft.Orleans.CodeGenerator.MSBuild\n\nRpcDemo.Hosting.Console專案：Silo後端服務專案，安裝套件有：\n\nMicrosoft.Orleans.Server\nMicrosoft.Extensions.Logging.Console\nMicrosoft.Extensions.Logging.Debug\n\nRpcDemo.Client.Console專案：示範呼叫Orleans RPC方法的Client專案，安裝套件有：\n\nMicrosoft.Orleans.Client\n\n\n用Visual Studio Code開啟專案根目錄，如果有提示增加設定檔案：\n\n選Yes，因為等下我們會修改它以便在Visual Studio Code內啟動除錯階段來跑。\n在RpcDemo.Interfaces.Hello專案內新增一個 IHelloGrain.cs 檔案，將Day03設計的RPC介面程式碼貼上：\nusing System.Threading.Tasks;\nusing Orleans;\n\nnamespace RpcDemo.Interfaces.Hello;\n\npublic interface IHelloGrain : IGrainWithIntegerKey\n{\n    Task&lt;string&gt; SayHello(string greeting);\n}\n在RpcDemo.Grains.Greeting專案內新增一個 HelloGrain.cs 檔案，將Day03設計的Grain實作程式碼貼上：\nusing System.Threading.Tasks;\nusing Orleans;\nusing RpcDemo.Interfaces.Hello;\n\nnamespace RpcDemo.Grains.Greeting;\n\npublic class HelloGrain : Grain, IHelloGrain\n{\n    public Task&lt;string&gt; SayHello(string greeting)\n    {\n        return Task.FromResult($\"Hello {greeting}!\");\n    }\n}\n將RpcDemo.Hosting.Console 專案中原本的 Program.cs 修改為：\nusing System.Net;\nusing Microsoft.Extensions.Logging;\nusing Orleans;\nusing Orleans.Configuration;\nusing Orleans.Hosting;\nusing RpcDemo.Grains.Greeting;\n\nvar siloHost = new SiloHostBuilder()\n    .UseLocalhostClustering()\n    .Configure&lt;ClusterOptions&gt;(options =&gt;\n    {\n        options.ClusterId = \"console-host-01\";\n        options.ServiceId = \"Demo Greeting Service\";\n    })\n    .Configure&lt;EndpointOptions&gt;(options =&gt; options.AdvertisedIPAddress = IPAddress.Loopback)\n    .ConfigureApplicationParts(parts =&gt;\n    {\n        parts.AddApplicationPart(typeof(HelloGrain).Assembly).WithReferences();\n    })\n    .ConfigureLogging(logging =&gt;\n    {\n        logging.AddConsole();\n        logging.AddDebug();\n    })\n    .Build();\n\n//Tricks to manually wait for Ctrl+C key press\nvar waitForProcessShutdown = new ManualResetEvent(false);\nConsole.CancelKeyPress += (sender, eventArgs) =&gt;\n{\n    eventArgs.Cancel = true;\n    waitForProcessShutdown.Set();\n};\n\nawait siloHost.StartAsync();\nConsole.WriteLine(\"===\\r\\nOrleans Silo started and able to connect,\\r\\nPress Ctrl+C to shutdown when client finish demonstration...\\r\\n===\");\nwaitForProcessShutdown.WaitOne();\n\nConsole.WriteLine(\"Shutting down Silo...\");\nawait siloHost.StopAsync().ConfigureAwait(false);\nConsole.WriteLine(\"===\\r\\nSilo shutdown complete, exiting...\\r\\n===\");\nEnvironment.Exit(0);\n將RpcDemo.Client.Console專案中原本的 Program.cs 修改為：\nusing Orleans;\nusing Orleans.Configuration;\nusing RpcDemo.Interfaces.Hello;\n\nusing static System.Console;\n\nWriteLine(\"\\r\\n---Orleans RPCDemo Client---\");\nWriteLine(\"\\r\\n---\\r\\nInitializing Orleans Client...\\r\\n---\");\nvar client = new ClientBuilder()\n    .UseLocalhostClustering()\n    .Configure&lt;ClusterOptions&gt;(options =&gt;\n    {\n        options.ClusterId = \"console-client-01\";\n        options.ServiceId = \"Demo Greeting Service\";\n    })\n    .ConfigureApplicationParts(parts =&gt;\n    {\n        parts.AddApplicationPart(typeof(IHelloGrain).Assembly).WithReferences();\n    })\n    .Build();\n\nWriteLine(\n        \"Please wait until Orleans Server is started and ready for connections, then press any key to start connect...\");\nReadKey();\nawait client.Connect();\nWriteLine(\"\\r\\n---\\r\\nOrleans Client connected\\r\\n---\");\n\nvar helloGrain = client.GetGrain&lt;IHelloGrain&gt;(0);\nvar helloResult = await helloGrain.SayHello(\"Orleans\");\nWriteLine($\"\\r\\n---\\r\\nCall HelloGrain.SayHello(\\\"Orleans\\\") =\\r\\n{helloResult}\\r\\n---\");\nWriteLine(\"Demonstration finished, press any key to exit...\");\nReadKey();\n\nawait client.Close();\nclient.Dispose();\n將Visual Studio Code的.vscode目錄內的task.json改為下列內容：\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n      {\n          \"label\": \"build\",\n          \"dependsOn\": [\n              \"build server\",\n              \"build client\"\n          ],\n          \"dependsOrder\": \"sequence\",\n          \"group\": \"build\"\n      },\n      {\n          \"label\": \"build client\",\n          \"command\": \"dotnet\",\n          \"type\": \"process\",\n          \"args\": [\n              \"build\",\n              \"${workspaceFolder}/src/Hosting/Client/RpcDemo.Client.Console/RpcDemo.Client.Console.csproj\",\n              \"/property:GenerateFullPaths=true\",\n              \"/consoleloggerparameters:NoSummary\"\n          ],\n          \"problemMatcher\": \"$msCompile\"\n      },\n      {\n          \"label\": \"build server\",\n          \"command\": \"dotnet\",\n          \"type\": \"process\",\n          \"args\": [\n              \"build\",\n              \"${workspaceFolder}/src/Hosting/Server/RpcDemo.Hosting.Console/RpcDemo.Hosting.Console.csproj\",\n              \"/property:GenerateFullPaths=true\",\n              \"/consoleloggerparameters:NoSummary\"\n          ],\n          \"problemMatcher\": \"$msCompile\"\n      }\n  ]\n}\n將Visual Stuido Code的.vscode目錄內的launch.json改為下列內容：\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n      {\n          \"name\": \"Launch Server\",\n          \"type\": \"coreclr\",\n          \"request\": \"launch\",\n          \"preLaunchTask\": \"build server\",\n          // If you have changed target frameworks, make sure to update the program path.\n          \"program\": \"${workspaceFolder}/src/Hosting/Server/RpcDemo.Hosting.Console/bin/Debug/net6.0/RpcDemo.Hosting.Console.dll\",\n          \"args\": [],\n          \"cwd\": \"${workspaceFolder}/src/Hosting/Server/RpcDemo.Hosting.Console\",\n          \"console\": \"integratedTerminal\",\n          \"stopAtEntry\": false\n      },\n      {\n          \"name\": \"Launch Client\",\n          \"type\": \"coreclr\",\n          \"request\": \"launch\",\n          \"preLaunchTask\": \"build client\",\n          // If you have changed target frameworks, make sure to update the program path.\n          \"program\": \"${workspaceFolder}/src/Hosting/Client/RpcDemo.Client.Console/bin/Debug/net6.0/RpcDemo.Client.Console.dll\",\n          \"args\": [],\n          \"cwd\": \"${workspaceFolder}/src/Hosting/Client/RpcDemo.Client.Console\",\n          \"console\": \"externalTerminal\",\n          \"stopAtEntry\": false\n      }\n  ]\n}\n\n\n\n\n\n切換到Visual Studio Code的Debug頁籤，選取Launch Server，按左邊的綠色啟動按鈕或下鍵盤F5鍵，啟動Orleans Silo。\n\n可能會出現是否要允許防火牆通過，請選擇允許存取。\n\n等到Visual Studio Code的Terminal視窗出現如下圖的螢幕提示時，表示Server端程式已經啟動完成。\n\n切換到Visual Studio Code的Debug頁籤，選取Launch Client，按左邊的綠色啟動按鈕或下鍵盤F5鍵，啟動Orleans Client。\n\n在跳出來的命令列視窗中，按下任意鍵，讓Client端程式開始連線到Server端程式。\n\n然後就會顯示呼叫Grain的SayHello() RPC方法的結果：\n\n要結束此執行範例，在Client的命令列視窗按任意鍵停止Client端程式，然後在Visual Studio的Terminal視窗按下Ctrl+C停止Server端程式。"
  },
  {
    "objectID": "chapters/chapter_05/online_helloworld_lab.html#建立-c-專案及方案結構",
    "href": "chapters/chapter_05/online_helloworld_lab.html#建立-c-專案及方案結構",
    "title": "使用 .NET 命令列程式執行Orleans的Grain實作",
    "section": "",
    "text": "用PowerShell 7的指令列先建立資料夾結構，在專案根目錄執行下列指令：\nNew-Item -ItemType Directory \"./src/Hosting/Client\"\nNew-Item -ItemType Directory \"./src/Hosting/Server\"\n工作目錄切換到 src/Hosting/Client，建立 HelloWorld.Client.Console 的主控台應用程式專案：\ndotnet new console --no-restore --name \"HelloWorld.Client.Console\"\n工作目錄切換進 HelloWorld.Client.Console，將 HelloWorld.Interfaces.Hello 類別庫專案的參考加入：\ndotnet add reference ..\\..\\..\\Shared\\HelloWorld.Interfaces.Hello\\HelloWorld.Interfaces.Hello.csproj\n工作目錄切換到 src/Hosting/Server，建立 HelloWorld.Hosting.Console 的主控台應用程式專案：\ndotnet new console --no-restore --name \"HelloWorld.Hosting.Console\"\n工作目錄切換進 RpcDemo.Hosting.Console，將 RpcDemo.Grains.Greeting 類別庫專案的專案參考加入：\ndotnet add reference ..\\..\\..\\Grains\\HelloWorld.Grains.Greeting\\HelloWorld.Grains.Greeting.csproj\n工作目錄切換回最上層根目錄，將類別庫專案一一加入解決方案：\n（記得要使用 --solution-folder 參數，指定產生方案資料夾(Solution Folder)）\ndotnet sln add .\\src\\Hosting\\Client\\HelloWorld.Client.Console\\HelloWorld.Client.Console.csproj --solution-folder \"Hosting\\Client\"\ndotnet sln add .\\src\\Hosting\\Server\\HelloWorld.Hosting.Console\\HelloWorld.Hosting.Console.csproj --solution-folder \"Hosting\\Server\""
  },
  {
    "objectID": "chapters/chapter_05/online_helloworld_lab.html#專案程式碼撰寫",
    "href": "chapters/chapter_05/online_helloworld_lab.html#專案程式碼撰寫",
    "title": "使用 .NET 命令列程式執行Orleans的Grain實作",
    "section": "",
    "text": "將各專案安裝對應的Nuget套件：\n\nRpcDemo.Interfaces.Hello專案：RPC介面專案，安裝套件有：\n\nMicrosoft.Orleans.Core.Abstractions\nMicrosoft.Orleans.CodeGenerator.MSBuild\n\nRpcDemo.Grains.Greeting專案：Grain實作專案，安裝套件有：\n\nMicrosoft.Orleans.Core\nMicrosoft.Orleans.CodeGenerator.MSBuild\n\nRpcDemo.Hosting.Console專案：Silo後端服務專案，安裝套件有：\n\nMicrosoft.Orleans.Server\nMicrosoft.Extensions.Logging.Console\nMicrosoft.Extensions.Logging.Debug\n\nRpcDemo.Client.Console專案：示範呼叫Orleans RPC方法的Client專案，安裝套件有：\n\nMicrosoft.Orleans.Client\n\n\n用Visual Studio Code開啟專案根目錄，如果有提示增加設定檔案：\n\n選Yes，因為等下我們會修改它以便在Visual Studio Code內啟動除錯階段來跑。\n在RpcDemo.Interfaces.Hello專案內新增一個 IHelloGrain.cs 檔案，將Day03設計的RPC介面程式碼貼上：\nusing System.Threading.Tasks;\nusing Orleans;\n\nnamespace RpcDemo.Interfaces.Hello;\n\npublic interface IHelloGrain : IGrainWithIntegerKey\n{\n    Task&lt;string&gt; SayHello(string greeting);\n}\n在RpcDemo.Grains.Greeting專案內新增一個 HelloGrain.cs 檔案，將Day03設計的Grain實作程式碼貼上：\nusing System.Threading.Tasks;\nusing Orleans;\nusing RpcDemo.Interfaces.Hello;\n\nnamespace RpcDemo.Grains.Greeting;\n\npublic class HelloGrain : Grain, IHelloGrain\n{\n    public Task&lt;string&gt; SayHello(string greeting)\n    {\n        return Task.FromResult($\"Hello {greeting}!\");\n    }\n}\n將RpcDemo.Hosting.Console 專案中原本的 Program.cs 修改為：\nusing System.Net;\nusing Microsoft.Extensions.Logging;\nusing Orleans;\nusing Orleans.Configuration;\nusing Orleans.Hosting;\nusing RpcDemo.Grains.Greeting;\n\nvar siloHost = new SiloHostBuilder()\n    .UseLocalhostClustering()\n    .Configure&lt;ClusterOptions&gt;(options =&gt;\n    {\n        options.ClusterId = \"console-host-01\";\n        options.ServiceId = \"Demo Greeting Service\";\n    })\n    .Configure&lt;EndpointOptions&gt;(options =&gt; options.AdvertisedIPAddress = IPAddress.Loopback)\n    .ConfigureApplicationParts(parts =&gt;\n    {\n        parts.AddApplicationPart(typeof(HelloGrain).Assembly).WithReferences();\n    })\n    .ConfigureLogging(logging =&gt;\n    {\n        logging.AddConsole();\n        logging.AddDebug();\n    })\n    .Build();\n\n//Tricks to manually wait for Ctrl+C key press\nvar waitForProcessShutdown = new ManualResetEvent(false);\nConsole.CancelKeyPress += (sender, eventArgs) =&gt;\n{\n    eventArgs.Cancel = true;\n    waitForProcessShutdown.Set();\n};\n\nawait siloHost.StartAsync();\nConsole.WriteLine(\"===\\r\\nOrleans Silo started and able to connect,\\r\\nPress Ctrl+C to shutdown when client finish demonstration...\\r\\n===\");\nwaitForProcessShutdown.WaitOne();\n\nConsole.WriteLine(\"Shutting down Silo...\");\nawait siloHost.StopAsync().ConfigureAwait(false);\nConsole.WriteLine(\"===\\r\\nSilo shutdown complete, exiting...\\r\\n===\");\nEnvironment.Exit(0);\n將RpcDemo.Client.Console專案中原本的 Program.cs 修改為：\nusing Orleans;\nusing Orleans.Configuration;\nusing RpcDemo.Interfaces.Hello;\n\nusing static System.Console;\n\nWriteLine(\"\\r\\n---Orleans RPCDemo Client---\");\nWriteLine(\"\\r\\n---\\r\\nInitializing Orleans Client...\\r\\n---\");\nvar client = new ClientBuilder()\n    .UseLocalhostClustering()\n    .Configure&lt;ClusterOptions&gt;(options =&gt;\n    {\n        options.ClusterId = \"console-client-01\";\n        options.ServiceId = \"Demo Greeting Service\";\n    })\n    .ConfigureApplicationParts(parts =&gt;\n    {\n        parts.AddApplicationPart(typeof(IHelloGrain).Assembly).WithReferences();\n    })\n    .Build();\n\nWriteLine(\n        \"Please wait until Orleans Server is started and ready for connections, then press any key to start connect...\");\nReadKey();\nawait client.Connect();\nWriteLine(\"\\r\\n---\\r\\nOrleans Client connected\\r\\n---\");\n\nvar helloGrain = client.GetGrain&lt;IHelloGrain&gt;(0);\nvar helloResult = await helloGrain.SayHello(\"Orleans\");\nWriteLine($\"\\r\\n---\\r\\nCall HelloGrain.SayHello(\\\"Orleans\\\") =\\r\\n{helloResult}\\r\\n---\");\nWriteLine(\"Demonstration finished, press any key to exit...\");\nReadKey();\n\nawait client.Close();\nclient.Dispose();\n將Visual Studio Code的.vscode目錄內的task.json改為下列內容：\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n      {\n          \"label\": \"build\",\n          \"dependsOn\": [\n              \"build server\",\n              \"build client\"\n          ],\n          \"dependsOrder\": \"sequence\",\n          \"group\": \"build\"\n      },\n      {\n          \"label\": \"build client\",\n          \"command\": \"dotnet\",\n          \"type\": \"process\",\n          \"args\": [\n              \"build\",\n              \"${workspaceFolder}/src/Hosting/Client/RpcDemo.Client.Console/RpcDemo.Client.Console.csproj\",\n              \"/property:GenerateFullPaths=true\",\n              \"/consoleloggerparameters:NoSummary\"\n          ],\n          \"problemMatcher\": \"$msCompile\"\n      },\n      {\n          \"label\": \"build server\",\n          \"command\": \"dotnet\",\n          \"type\": \"process\",\n          \"args\": [\n              \"build\",\n              \"${workspaceFolder}/src/Hosting/Server/RpcDemo.Hosting.Console/RpcDemo.Hosting.Console.csproj\",\n              \"/property:GenerateFullPaths=true\",\n              \"/consoleloggerparameters:NoSummary\"\n          ],\n          \"problemMatcher\": \"$msCompile\"\n      }\n  ]\n}\n將Visual Stuido Code的.vscode目錄內的launch.json改為下列內容：\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n      {\n          \"name\": \"Launch Server\",\n          \"type\": \"coreclr\",\n          \"request\": \"launch\",\n          \"preLaunchTask\": \"build server\",\n          // If you have changed target frameworks, make sure to update the program path.\n          \"program\": \"${workspaceFolder}/src/Hosting/Server/RpcDemo.Hosting.Console/bin/Debug/net6.0/RpcDemo.Hosting.Console.dll\",\n          \"args\": [],\n          \"cwd\": \"${workspaceFolder}/src/Hosting/Server/RpcDemo.Hosting.Console\",\n          \"console\": \"integratedTerminal\",\n          \"stopAtEntry\": false\n      },\n      {\n          \"name\": \"Launch Client\",\n          \"type\": \"coreclr\",\n          \"request\": \"launch\",\n          \"preLaunchTask\": \"build client\",\n          // If you have changed target frameworks, make sure to update the program path.\n          \"program\": \"${workspaceFolder}/src/Hosting/Client/RpcDemo.Client.Console/bin/Debug/net6.0/RpcDemo.Client.Console.dll\",\n          \"args\": [],\n          \"cwd\": \"${workspaceFolder}/src/Hosting/Client/RpcDemo.Client.Console\",\n          \"console\": \"externalTerminal\",\n          \"stopAtEntry\": false\n      }\n  ]\n}"
  },
  {
    "objectID": "chapters/chapter_05/online_helloworld_lab.html#執行測試",
    "href": "chapters/chapter_05/online_helloworld_lab.html#執行測試",
    "title": "使用 .NET 命令列程式執行Orleans的Grain實作",
    "section": "",
    "text": "切換到Visual Studio Code的Debug頁籤，選取Launch Server，按左邊的綠色啟動按鈕或下鍵盤F5鍵，啟動Orleans Silo。\n\n可能會出現是否要允許防火牆通過，請選擇允許存取。\n\n等到Visual Studio Code的Terminal視窗出現如下圖的螢幕提示時，表示Server端程式已經啟動完成。\n\n切換到Visual Studio Code的Debug頁籤，選取Launch Client，按左邊的綠色啟動按鈕或下鍵盤F5鍵，啟動Orleans Client。\n\n在跳出來的命令列視窗中，按下任意鍵，讓Client端程式開始連線到Server端程式。\n\n然後就會顯示呼叫Grain的SayHello() RPC方法的結果：\n\n要結束此執行範例，在Client的命令列視窗按任意鍵停止Client端程式，然後在Visual Studio的Terminal視窗按下Ctrl+C停止Server端程式。"
  }
]